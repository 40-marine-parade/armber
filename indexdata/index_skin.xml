<?xml version="1.0" encoding="UTF-8"?>
<krpano version="1.19-pr16">

    
  <!-- Spot Style - Default Point Spot Style -->


  <style name="IconDefaultPointSpotStyle"
         url="%FIRSTXML%/spots/hotspot_plan_sequence_user_defaultpoint0.png"
         visible="false"
         frame="0"
         lastframe="9"
         framewidth="67"
         frameheight="67"
         stopspotsequence="false"
         crop="0|0|67|67"
         edge="center"
         rotate="180"
         onloaded="startspotanimation(0.1);"
         onhover="onhoverIconDefaultPointSpotStyle"
         onout="onoutIconDefaultPointSpotStyle"


         width="50"
         height="prop"
         />
  <action name="onhoverIconDefaultPointSpotStyle">
    showtooltip('hotspot');
  </action>
  <action name="onoutIconDefaultPointSpotStyle">
    hideTooltip();



  </action>



  <!-- unsupported kind of display : PointMap -->


<!-- ********** -->
<!-- Classic Control Bar No Shadow -->
<!-- id : classicControlBarNoShadow -->
<!-- ********** -->

  <krpano classicControlBarNoShadowbarbuilt="false" classicControlBarNoShadowbackgroundwidthwhenclosed="0" classicControlBarNoShadowbackgroundwidthwhenopened="0" classicControlBarNoShadowIsOpened="false" />
  <events name="classicControlBarNoShadowevents" 
    onxmlcomplete="classicControlBarNoShadowbuildMenuBar();" 


    keep="true" />



  <action name="classicControlBarNoShadowbuildMenuBar">
    ifnot (classicControlBarNoShadowbarbuilt, classicControlBarNoShadowbuildMenu(); set(classicControlBarNoShadowbarbuilt, true););
  </action>

  <action name="classicControlBarNoShadowbuildMenu">
    
    set(classicControlBarNoShadowbutton_pos, 20);

    set(layer[classicControlBarNoShadowbtn_hidecontrols].y, get(classicControlBarNoShadowbutton_pos));
    set(layer[classicControlBarNoShadowbtn_showcontrols].y, get(classicControlBarNoShadowbutton_pos));
    inc(classicControlBarNoShadowbutton_pos, 36);
    add(classicControlBarNoShadowbackgroundwidthwhenclosed, get(classicControlBarNoShadowbutton_pos), 20);



    if (device.desktop,
      set(layer[classicControlBarNoShadowbtn_display_help].y, get(classicControlBarNoShadowbutton_pos));
      set(layer[classicControlBarNoShadowbtn_close_help  ].y, get(classicControlBarNoShadowbutton_pos));
      inc(classicControlBarNoShadowbutton_pos, 36);
    );

    if (device.fullscreensupport,
      set(layer[classicControlBarNoShadowbtn_openfs ].y, get(classicControlBarNoShadowbutton_pos));
      set(layer[classicControlBarNoShadowbtn_closefs].y, get(classicControlBarNoShadowbutton_pos));
      inc(classicControlBarNoShadowbutton_pos, 36);
    );


    set(layer[classicControlBarNoShadowbtn_display_floorplan].y, get(classicControlBarNoShadowbutton_pos));
    set(layer[classicControlBarNoShadowbtn_hide_floorplan   ].y, get(classicControlBarNoShadowbutton_pos));
    inc(classicControlBarNoShadowbutton_pos, 36);


    set(layer[classicControlBarNoShadowbtn_autorotate_on ].y, get(classicControlBarNoShadowbutton_pos));
    set(layer[classicControlBarNoShadowbtn_autorotate_off].y, get(classicControlBarNoShadowbutton_pos));
    inc(classicControlBarNoShadowbutton_pos, 36);




    if(plugin[ptpvrmode] AND device.html5,
      set(layer[classicControlBarNoShadowbtn_enter_vr].y, get(classicControlBarNoShadowbutton_pos));
      set(layer[classicControlBarNoShadowbtn_enter_vr_not].y, get(classicControlBarNoShadowbutton_pos));
      inc(classicControlBarNoShadowbutton_pos, 36);
    );


    if(plugin[gyroscope],
      set(classicControlBarNoShadowDisplayGyroscopeButton, false);
      if (device.tablet, set(classicControlBarNoShadowDisplayGyroscopeButton, true););
      if (device.mobile, set(classicControlBarNoShadowDisplayGyroscopeButton, true););
      if(classicControlBarNoShadowDisplayGyroscopeButton,
        set(layer[classicControlBarNoShadowbtn_gyroscope_on ].y, get(classicControlBarNoShadowbutton_pos));
        set(layer[classicControlBarNoShadowbtn_gyroscope_off].y, get(classicControlBarNoShadowbutton_pos));
        set(layer[classicControlBarNoShadowbtn_gyroscope_not].y, get(classicControlBarNoShadowbutton_pos));
        inc(classicControlBarNoShadowbutton_pos, 36);
      );
    );




    inc(classicControlBarNoShadowbutton_pos, 20);

    set(classicControlBarNoShadowbackgroundwidthwhenopened, get(classicControlBarNoShadowbutton_pos));



    
    add(classicControlBarNoShadowVerifyVisibility, 20, 20);
    if(classicControlBarNoShadowbackgroundwidthwhenopened == classicControlBarNoShadowVerifyVisibility,
      set(classicControlBarNoShadowbackgroundwidthwhenopened, 0);


    );

	
	
  </action>

	<events name="classicControlBarNoShadowStartTourEvents" onTourStart="classicControlBarNoShadowCallOnStartTour();" keep="true" />

	<action name="classicControlBarNoShadowCallOnStartTour">
		
		set(layer[classicControlBarNoShadowmenu_controlbar_bg_img].height, get(classicControlBarNoShadowbutton_pos));
		set(layer[classicControlBarNoShadowmenu_controlbar_bg].height, get(classicControlBarNoShadowbutton_pos));
		classicControlBarNoShadowshowMenuControls();
	</action>



  <style name="classicControlBarNoShadow_btn_style"
         keep="true"
         alpha="0.8"
         edge="bottom" align="bottom"
         width="36" height="36"
         zorder="3"
         onover="classicControlBarNoShadowctrlbaronoveraction();"
         onout="classicControlBarNoShadowctrlbaronoutaction();"
         onhover="showTooltip('plugin', classicControlBarNoShadowmenuTooltipStyle, right);"
         />
  <action name="classicControlBarNoShadowctrlbaronoveraction">
    tween(alpha,1,0.1,easeoutquad);
    tween(x,-2,0.1,easeoutquad);
  </action>  
  <action name="classicControlBarNoShadowctrlbaronoutaction">
    tween(alpha,0.8);
    tween(x,0,0.1,easeoutquad);
    hideTooltip();
  </action>

  <layer name="classicControlBarNoShadowmenu_controlbar_bg_img"
         keep="true"
         align="bottomright"
         x="0" y="65"
         url="%FIRSTXML%/graphics/classiccontrolbarnoshadow/footer.png"
         zorder="1"
         width="40"
         height="40"
         scale9grid="10|10|80|80"
         visible="false"
         />
  <layer name="classicControlBarNoShadowmenu_controlbar_bg"
         keep="true"
         align="bottomright"
         x="0" y="65"
         type="container"
         zorder="2"
         width="40"
         height="40"
         visible="false"
         alpha="1.0"
         >


    <layer name="classicControlBarNoShadowbtn_gyroscope_off"
            url="%FIRSTXML%/graphics/classiccontrolbarnoshadow/btn_gyroscope.png"
            style="classicControlBarNoShadow_btn_style"
            onclick="disableGyroscope();
"
            devices="html5"
            tooltip="classicControlBarNoShadowgyroOffTip"
            visible="false"
            />
    <layer name="classicControlBarNoShadowbtn_gyroscope_on"
            url="%FIRSTXML%/graphics/classiccontrolbarnoshadow/btn_gyroscope.png"
            style="classicControlBarNoShadow_btn_style"
            onclick="enableGyroscope();
"
            devices="html5"
            tooltip="classicControlBarNoShadowgyroOnTip"
            visible="false"
            />
    <layer name="classicControlBarNoShadowbtn_gyroscope_not"
            url="%FIRSTXML%/graphics/classiccontrolbarnoshadow/btn_gyroscope_off.png"
            style="classicControlBarNoShadow_btn_style"
            enabled="true"
            capture="false"
            devices="html5"
            tooltip="classicControlBarNoShadowgyroNotTip"
            visible="false"
            />





    <layer name="classicControlBarNoShadowbtn_display_floorplan"
           url="%FIRSTXML%/graphics/classiccontrolbarnoshadow/btn_floorplan.png"
           onclick="showFloorplan();
"
           style="classicControlBarNoShadow_btn_style"
           visible="false"
           tooltip="classicControlBarNoShadowdisplayFloorplanTip"
           />
    <layer name="classicControlBarNoShadowbtn_hide_floorplan"
           url="%FIRSTXML%/graphics/classiccontrolbarnoshadow/btn_floorplan.png"
           onclick="hideFloorplan();
"
           style="classicControlBarNoShadow_btn_style"
           visible="false"
           tooltip="classicControlBarNoShadowhideFloorplanTip"
           />


    <layer name="classicControlBarNoShadowbtn_openfs"
            url="%FIRSTXML%/graphics/classiccontrolbarnoshadow/btn_enter_fs.png"
            onclick="enterFullscreen();
"
            style="classicControlBarNoShadow_btn_style"
            devices="fullscreensupport"
            visible="false"
            tooltip="classicControlBarNoShadowopenFsTip"
            />
    <layer name="classicControlBarNoShadowbtn_closefs"
            url="%FIRSTXML%/graphics/classiccontrolbarnoshadow/btn_close_fs.png"
            onclick="exitFullscreen();
"
            style="classicControlBarNoShadow_btn_style"
            visible="false"
            devices="fullscreensupport"
            tooltip="classicControlBarNoShadowcloseFsTip"
            />

    <layer name="classicControlBarNoShadowbtn_autorotate_on"
            url="%FIRSTXML%/graphics/classiccontrolbarnoshadow/btn_start_autorotation.png"
            onclick="resumeautorotation();
"
            style="classicControlBarNoShadow_btn_style"
            visible="false"
            tooltip="classicControlBarNoShadowautorotateOnTip"
            />
    <layer name="classicControlBarNoShadowbtn_autorotate_off"
            url="%FIRSTXML%/graphics/classiccontrolbarnoshadow/btn_stop_autorotation.png"
            onclick="pauseautorotation();
"
            style="classicControlBarNoShadow_btn_style"
            visible="false"
            tooltip="classicControlBarNoShadowautorotateOffTip"
            />


    <layer name="classicControlBarNoShadowbtn_enter_vr"
           url="%FIRSTXML%/graphics/classiccontrolbarnoshadow/btn_vr_mode.png"
           onclick="if(scene[get(xml.scene)].full360 AND disableCurrentSceneVrConservation !== true,
    js(accessWebVr(get(xml.scene),get(videoscenestarttime)));
,
    js(accessWebVr(null));
);"
           style="classicControlBarNoShadow_btn_style"
           visible="false"
           devices="html5"
           tooltip="classicControlBarNoShadowenterVRTip"
           />
    <layer name="classicControlBarNoShadowbtn_enter_vr_not"
           url="%FIRSTXML%/graphics/classiccontrolbarnoshadow/btn_vr_mode_off.png"
           style="classicControlBarNoShadow_btn_style"
           enabled="true"
           capture="false"
           visible="false"
           devices="html5"
           tooltip="classicControlBarNoShadowenterVRNotTip"
           />

    <layer name="classicControlBarNoShadowbtn_display_help"
            url="%FIRSTXML%/graphics/classiccontrolbarnoshadow/btn_help.png"
            onclick="classicControlBarNoShadowdisplayHelp();"
            style="classicControlBarNoShadow_btn_style"
            devices="desktop"
            visible="false"
            tooltip="classicControlBarNoShadowdisplayHelpTip"
            />
    <layer name="classicControlBarNoShadowbtn_close_help"
            url="%FIRSTXML%/graphics/classiccontrolbarnoshadow/btn_help.png"
            onclick="classicControlBarNoShadowcloseHelp();"
            style="classicControlBarNoShadow_btn_style"
            visible="false"
            devices="desktop"
            tooltip="classicControlBarNoShadowhideHelpTip"
            />



    <layer name="classicControlBarNoShadowbtn_hidecontrols"
            url="%FIRSTXML%/graphics/classiccontrolbarnoshadow/btn_hide_controls.png"
            style="classicControlBarNoShadow_btn_style"
            onclick="classicControlBarNoShadowhideMenuControls();hideTourControls();
"
            visible="false"
            tooltip="classicControlBarNoShadowhideControlsTip"
            />
    <layer name="classicControlBarNoShadowbtn_showcontrols"
            url="%FIRSTXML%/graphics/classiccontrolbarnoshadow/btn_show_controls.png"
            style="classicControlBarNoShadow_btn_style"
            onclick="classicControlBarNoShadowshowMenuControls();showTourControls();
"
            tooltip="classicControlBarNoShadowdisplayControlsTip"
            visible="false"
            />
  </layer>


<events name="classicControlBarNoShadowvravailableevent"
		onvravailable="classicControlBarNoShadowupdateVrButtonsAvailability();"
		onvrunavailable="classicControlBarNoShadowupdateVrButtonsAvailability();"
		keep="true" devices="html5" />
	<krpano classicControlBarNoShadowmenuvravailable="false" />
	<action name="classicControlBarNoShadowupdateVrButtonsAvailability">
		if (tour_vrdevices,
			set(classicControlBarNoShadowmenuvravailable, true);
		,
			set(classicControlBarNoShadowmenuvravailable, false);
		);
		classicControlBarNoShadowupdateVrButtons();
	</action>
	<action name="classicControlBarNoShadowHideVrButtons">
		set(layer[classicControlBarNoShadowbtn_enter_vr].visible, false);
		if('%1' == 'true' AND plugin[ptpvrmode],
			set(layer[classicControlBarNoShadowbtn_enter_vr_not].visible, true);
		,
			set(layer[classicControlBarNoShadowbtn_enter_vr_not].visible, false);
		);
	</action>
	<action name="classicControlBarNoShadowShowVrButtons">
		if (classicControlBarNoShadowmenuvravailable,
			set(layer[classicControlBarNoShadowbtn_enter_vr].visible, true);
			set(layer[classicControlBarNoShadowbtn_enter_vr_not].visible, false);
		,
			classicControlBarNoShadowHideVrButtons(true);
		);
	</action>
	<action name="classicControlBarNoShadowupdateVrButtons">
	if (tour_vrdevices,
		if (classicControlBarNoShadowIsOpened,
			classicControlBarNoShadowShowVrButtons();
		,
			classicControlBarNoShadowHideVrButtons();
		);
	,
		if (classicControlBarNoShadowIsOpened,
			classicControlBarNoShadowHideVrButtons(true);
		,
			classicControlBarNoShadowHideVrButtons();
		);
	);
	</action>

	<events name="classicControlBarNoShadowgyroscopeavailableevent"
		ongyroscopeavailable="classicControlBarNoShadowupdateGyroscopeButtonsAvailability();"
		ongyroscopeunavailable="classicControlBarNoShadowupdateGyroscopeButtonsAvailability();"
		ongyroscopeon="classicControlBarNoShadowenableGyroscopeButtons(true);"
		ongyroscopeoff="classicControlBarNoShadowenableGyroscopeButtons(false);"
		keep="true" devices="html5" />
	<krpano classicControlBarNoShadowmenugyroscopeavailable="false" classicControlBarNoShadowmenugyroscopeenabled="false" />
	<action name="classicControlBarNoShadowupdateGyroscopeButtonsAvailability">
		if (tour_gyroscopedevices,
			set(classicControlBarNoShadowmenugyroscopeavailable, true);
			classicControlBarNoShadowupdateGyroscopeButtons();
		,
			set(classicControlBarNoShadowmenugyroscopeavailable, false);
			classicControlBarNoShadowupdateGyroscopeButtons();
		);
	</action>
	<action name="classicControlBarNoShadowenableGyroscopeButtons">
		if (tour_gyroscopedevices,
			set(classicControlBarNoShadowmenugyroscopeenabled, %1);
			classicControlBarNoShadowupdateGyroscopeButtons();
		);
	</action>
	<action name="classicControlBarNoShadowHideGyroscopeButtons">
		set(layer[classicControlBarNoShadowbtn_gyroscope_off].visible, false);
		set(layer[classicControlBarNoShadowbtn_gyroscope_on].visible, false);
		if('%1' == 'true' AND plugin[gyroscope],
			set(layer[classicControlBarNoShadowbtn_gyroscope_not].visible, true);
		,
			set(layer[classicControlBarNoShadowbtn_gyroscope_not].visible, false);
		);
	</action>
	<action name="classicControlBarNoShadowShowGyroscopeButtons">
		if (classicControlBarNoShadowmenugyroscopeavailable,
			if (classicControlBarNoShadowmenugyroscopeenabled,
				set(layer[classicControlBarNoShadowbtn_gyroscope_off].visible, true);
				set(layer[classicControlBarNoShadowbtn_gyroscope_on].visible, false);
			,
				set(layer[classicControlBarNoShadowbtn_gyroscope_off].visible, false);
				set(layer[classicControlBarNoShadowbtn_gyroscope_on].visible, true);
			);
			set(layer[classicControlBarNoShadowbtn_gyroscope_not].visible, false);
		,
			classicControlBarNoShadowHideGyroscopeButtons(true);
		);
	</action>
	<action name="classicControlBarNoShadowupdateGyroscopeButtons">
	if (tour_gyroscopedevices,
		if (classicControlBarNoShadowIsOpened,
			classicControlBarNoShadowShowGyroscopeButtons();
		,
			classicControlBarNoShadowHideGyroscopeButtons();
		);
	,
		if (classicControlBarNoShadowIsOpened,
			classicControlBarNoShadowHideGyroscopeButtons(true);
		,
			classicControlBarNoShadowHideGyroscopeButtons();
		);
	);
	</action>



  <action name="classicControlBarNoShadowhideMenuControls">
    set(classicControlBarNoShadowIsOpened, false);
    set(layer[classicControlBarNoShadowbtn_hidecontrols].visible, false);
    set(layer[classicControlBarNoShadowbtn_showcontrols].visible, true);
    classicControlBarNoShadowupdateFullscreenButtons();

    classicControlBarNoShadowupdateVrButtons();

    classicControlBarNoShadowupdateAutorotationButtons();



    classicControlBarNoShadowupdateFloorplanButtons();


    classicControlBarNoShadowupdateGyroscopeButtons();

    classicControlBarNoShadowupdateHelpButtons();


    if(classicControlBarNoShadowbackgroundwidthwhenclosed == 0,
      set(layer[classicControlBarNoShadowmenu_controlbar_bg_img].visible, false);
      set(layer[classicControlBarNoShadowmenu_controlbar_bg].visible, false);
    ,
      set(layer[classicControlBarNoShadowmenu_controlbar_bg_img].visible, true);
      set(layer[classicControlBarNoShadowmenu_controlbar_bg].visible, true);
    );
    tween(layer[classicControlBarNoShadowmenu_controlbar_bg_img].height,get(classicControlBarNoShadowbackgroundwidthwhenclosed),0.5,easeOutQuad);
    tween(layer[classicControlBarNoShadowmenu_controlbar_bg].height,get(classicControlBarNoShadowbackgroundwidthwhenclosed),0.5,easeOutQuad);
    tween(layer[classicControlBarNoShadowmenu_controlbar_bg_img].alpha,1.0,0.5,easeOutQuad);
  </action>
  <action name="classicControlBarNoShadowshowMenuControls">
    set(classicControlBarNoShadowIsOpened, true);
    set(layer[classicControlBarNoShadowbtn_hidecontrols].visible, true);
    set(layer[classicControlBarNoShadowbtn_showcontrols].visible, false);
    if(classicControlBarNoShadowbackgroundwidthwhenopened == 0,
      set(layer[classicControlBarNoShadowmenu_controlbar_bg_img].visible, false);
      set(layer[classicControlBarNoShadowmenu_controlbar_bg].visible, false);
    ,
      set(layer[classicControlBarNoShadowmenu_controlbar_bg_img].visible, true);
      set(layer[classicControlBarNoShadowmenu_controlbar_bg].visible, true);
    );
    tween(layer[classicControlBarNoShadowmenu_controlbar_bg_img].alpha,1.0,0.5,easeOutQuad);
    classicControlBarNoShadowshowMenuButtons();


      tween(layer[classicControlBarNoShadowmenu_controlbar_bg_img].height, get(classicControlBarNoShadowbackgroundwidthwhenopened),0.5,easeOutQuad);
      tween(layer[classicControlBarNoShadowmenu_controlbar_bg].height, get(classicControlBarNoShadowbackgroundwidthwhenopened),0.5,easeOutQuad);


  </action>
  <action name="classicControlBarNoShadowshowMenuButtons">

    classicControlBarNoShadowupdateFloorplanButtons();


    classicControlBarNoShadowupdateGyroscopeButtons();

    classicControlBarNoShadowupdateHelpButtons();


    classicControlBarNoShadowupdateFullscreenButtons();

    classicControlBarNoShadowupdateVrButtons();

    classicControlBarNoShadowupdateAutorotationButtons();


  </action>

  <layer name="classicControlBarNoShadowhelpScreen" align="center" keep="true" onclick="classicControlBarNoShadowcloseHelp();" url="%FIRSTXML%/graphics/classiccontrolbarnoshadow/help_screen_bg.png" visible="false" zorder="97" height="10%" width="prop" />

  <layer name="classicControlBarNoShadowhelpScreenFg" align="center" keep="true" onclick="classicControlBarNoShadowcloseHelp();" displayed="false" 
         url="%FIRSTXML%/graphics/classiccontrolbarnoshadow/help_screen_fg.png" 
         alpha="0.8" 
         height="50%" 
         width="prop" 
         zorder="98"
         visible="false" />
  <action name="classicControlBarNoShadowdisplayHelp">
    set(layer[classicControlBarNoShadowhelpScreenFg].displayed,true);
    set(layer[classicControlBarNoShadowhelpScreen].visible,true);
    tween(layer[classicControlBarNoShadowhelpScreen].height, 50%, 1, easeOutQuad,
      set(layer[classicControlBarNoShadowhelpScreenFg].visible,true);
    );
    classicControlBarNoShadowupdateHelpButtons();
  </action>
  <action name="classicControlBarNoShadowcloseHelp">
    set(layer[classicControlBarNoShadowhelpScreenFg].displayed,false);
    set(layer[classicControlBarNoShadowhelpScreenFg].visible,false);
    tween(layer[classicControlBarNoShadowhelpScreen].height, 10%, 1, easeOutQuad,
      set(layer[classicControlBarNoShadowhelpScreen].visible,false);
    );
    classicControlBarNoShadowupdateHelpButtons();
  </action>
	<action name="classicControlBarNoShadowHideHelpButtons">
		set(layer[classicControlBarNoShadowbtn_display_help].visible, false);
		set(layer[classicControlBarNoShadowbtn_close_help].visible, false);
	</action>
	<action name="classicControlBarNoShadowShowHelpButtons">
		if (layer[classicControlBarNoShadowhelpScreenFg].displayed,
			set(layer[classicControlBarNoShadowbtn_close_help].visible, true);
			set(layer[classicControlBarNoShadowbtn_display_help].visible, false);
		,
			set(layer[classicControlBarNoShadowbtn_display_help].visible, true);
			set(layer[classicControlBarNoShadowbtn_close_help].visible, false);
		);
	</action>
	<action name="classicControlBarNoShadowupdateHelpButtons">
	if (device.desktop,
		if (classicControlBarNoShadowIsOpened,
			classicControlBarNoShadowShowHelpButtons();
		,
			classicControlBarNoShadowHideHelpButtons();
		);
	,
		classicControlBarNoShadowHideHelpButtons();
	);
	</action>


	<events name="classicControlBarNoShadowDisplayFloorPlanEvents" 
		onshowtourfloorplan="classicControlBarNoShadowupdateFloorplanButtons();" 
		onhidetourfloorplan="classicControlBarNoShadowupdateFloorplanButtons();" 
		keep="true" />
	<action name="classicControlBarNoShadowHideFloorplanButtons">
		set(layer[classicControlBarNoShadowbtn_display_floorplan].visible, false);
		set(layer[classicControlBarNoShadowbtn_hide_floorplan].visible, false);
	</action>
	<action name="classicControlBarNoShadowShowFloorplanButtons">
		if (tour_displayfloorplan,
			set(layer[classicControlBarNoShadowbtn_hide_floorplan].visible, true);
			set(layer[classicControlBarNoShadowbtn_display_floorplan].visible, false);
		,
			set(layer[classicControlBarNoShadowbtn_display_floorplan].visible, true);
			set(layer[classicControlBarNoShadowbtn_hide_floorplan].visible, false);
		);
	</action>
	<action name="classicControlBarNoShadowupdateFloorplanButtons">
		if (classicControlBarNoShadowIsOpened,
			classicControlBarNoShadowShowFloorplanButtons();
		,
			classicControlBarNoShadowHideFloorplanButtons();
		);
	</action>


	<events name="classicControlBarNoShadowmenufullscreenchangeevent"
		onenterfullscreen="classicControlBarNoShadowupdateFullscreenButtons();"
		onexitfullscreen="classicControlBarNoShadowupdateFullscreenButtons();"
		keep="true"/>
	<action name="classicControlBarNoShadowHideFullscreenButtons">
		set(layer[classicControlBarNoShadowbtn_openfs].visible , false);
		set(layer[classicControlBarNoShadowbtn_closefs].visible, false);
	</action>
	<action name="classicControlBarNoShadowShowFullscreenButtons">
		if (device.fullscreensupport,
			if(tour_fullscreen,
				set(layer[classicControlBarNoShadowbtn_openfs].visible , false);
				set(layer[classicControlBarNoShadowbtn_closefs].visible, true);
			,
				set(layer[classicControlBarNoShadowbtn_openfs].visible ,true);
				set(layer[classicControlBarNoShadowbtn_closefs].visible,false);
			);
		,
			classicControlBarNoShadowHideFullscreenButtons();
		);
	</action>
	<action name="classicControlBarNoShadowupdateFullscreenButtons">
		if (classicControlBarNoShadowIsOpened,
			classicControlBarNoShadowShowFullscreenButtons();
		,
			classicControlBarNoShadowHideFullscreenButtons();
		);
	</action>

	<events name="classicControlBarNoShadowAutorotationEvents"
		onstartautorotation="classicControlBarNoShadowupdateAutorotationButtons();"
		onresumeautorotation="classicControlBarNoShadowupdateAutorotationButtons();"
		onstopautorotation="classicControlBarNoShadowupdateAutorotationButtons();"
		onpauseautorotation="classicControlBarNoShadowupdateAutorotationButtons();"
		keep="true"/>
	<action name="classicControlBarNoShadowHideAutorotationButtons">
		set(layer[classicControlBarNoShadowbtn_autorotate_off].visible, false);
		set(layer[classicControlBarNoShadowbtn_autorotate_on].visible , false);
	</action>
	<action name="classicControlBarNoShadowShowAutorotationButtons">
		if(autorotate.enabled == false,
			set(layer[classicControlBarNoShadowbtn_autorotate_off].visible, false);
			set(layer[classicControlBarNoShadowbtn_autorotate_on].visible , true);
		,
			set(layer[classicControlBarNoShadowbtn_autorotate_off].visible, true);
			set(layer[classicControlBarNoShadowbtn_autorotate_on].visible , false);
		);
	</action>
	<action name="classicControlBarNoShadowupdateAutorotationButtons">
		if (classicControlBarNoShadowIsOpened,
			classicControlBarNoShadowShowAutorotationButtons();
		,
			classicControlBarNoShadowHideAutorotationButtons();
		);
	</action>




<layer name="classicControlBarNoShadowmenuTooltipStyle"
	keep="true"
	enabled="false"
	capture="false"
	type="text"
	align="center"
	bg="false"
	bgborder="0"
	txtshadow="1.0 1.0 4.0 0x000000 1"
	css="color:#ffffff;font-family:Helvetica;font-weight:bold;font-size:14px;text-align:left;"
	interactivecontent="false"
	zorder="0"
	visible="false"
	html=""
	padding="2"
	xoffset="0"
	yoffset="0"
	edge="right"
	/>



<!-- ********** -->
<!-- Context menu -->
<!-- id : contextmenu -->
<!-- ********** -->
  <contextmenu fullscreen="false" versioninfo="false" touch="false">
    <item name="author" onclick="getmessage(urltoopen,project_author_url);openurl(get(urltoopen),_blank);" />
    <item name="fullscreenentry" onclick="enterFullscreen();
" separator="true"/>
  </contextmenu>

  <events name="contextmenuevents" keep="true" 
    onenterfullscreen="updateContextMenu" onexitfullscreen="updateContextMenu" 
    onxmlcomplete="updateContextMenu" 
    changetourlanguage="updateContextMenu" 
    />
  <events name="contextmenuvrevents" keep="true" 
    onvravailable="updateContextMenu();" onvrunavailable="updateContextMenu();"
    devices="html5"
    />
  <action name="updateContextMenu">
    getmessage(contextmenu.item[author].caption, project_author_name);
    if (device.fullscreensupport,
      if(tour_fullscreen,
        getmessage(contextmenu.item[fullscreenentry].caption, contextmenucloseFsLabel);
        set(contextmenu.item[fullscreenentry].onclick, exitFullscreen();
);
       ,
        getmessage(contextmenu.item[fullscreenentry].caption, contextmenuopenFsLabel);
        set(contextmenu.item[fullscreenentry].onclick, enterFullscreen();
);
      );
     ,
      set(contextmenu.item[fullscreenentry].visible, false);
    );
  </action>

<!-- ********** -->
<!-- Loading transition -->
<!-- id : blendmode -->
<!-- ********** -->
	<action name="blendmode_prepareblendmode" autorun="preinit">

			set(ptblendmode, 'BLEND(1, easeInCubic)');

	</action>
<garrows_settings
	show_floatingarrow_d="true"
	show_chevrons_d="true"
	show_navpoints_d="false"
	show_contextmenu_d="false"
	show_originalhotspots_d="false"

	show_floatingarrow_m="true"
	show_chevrons_m="false"
	show_navpoints_m="false"
	show_contextmenu_m="false"
	show_originalhotspots_m="false"

	show_floatingarrow_vr="true"
	show_chevrons_vr="false"
	show_navpoints_vr="false"
	show_contextmenu_vr="false"
	show_originalhotspots_vr="false"

	floatingarrow_position_d="mouse"
	floatingarrow_position_m="fixed"
	floatingarrow_position_vr="fixed"
	
	floatingarrow_atv="25"
	floatingarrow_alpha="0.5"

	navhotspots_style="IconDefaultPointSpotStyle"
	navhotspots_style_vertical="IconDefaultPointSpotStyle1"

	startup_delay="0"
	show_tooltips="true"
	ignore_showhidehotspots="false"
	hotkey_f="true"
	chevrons_capture="true"
	chevrons_color="0xffffff"
	chevrons_coloronhover="0xed8634"
	chevrons_borderwidth="1"
	chevrons_zorder="50"
	chevrons_bordercolor="0xffffff"
	chevrons_bordercoloronhover="0xd7d7d7"
	chevrons_style_m="chevronshape"
	chevrons_style_d="chevronshape"
	chevrons_alpha="1"
	chevronsborder_alpha="1"
	floatingarrow_zorder="50"

	keep_view="true"
	keep_view_replace_what="MERGE"
	keep_view_replace_with="KEEPVIEW"

	chevrons_position="40"
	chevrons_scatter="80"
	chevrons_distance="120"
	floatingarrow_flyaway="true"
	floatingarrow_autohide="true"
	floatingarrow_sens="20"
	floatingarrow_updatedelay="1"
	floatingarrow_scale_d="10"
	floatingarrow_scale_m="10"
	navpoints_putonground="true"
	navpoints_atv="25"
	keyboard_control="true"

	plugin_directory="%FIRSTXML%/graphics/garrows"
	scenes_wobbling="false"
	scenes_wobbling_size="5"
	scenes_wobbling_time="500"
	scenes_wobbling_updatedelay="100"
	scenes_wobbling_stopondrag="false"
	chevrons_shadow_color="0x000000"
	chevrons_shadow_bordercolor="0x000000"
	chevrons_shadow_alpha="0.5"
	navpoints_alpha="0.2"
	navpoints_onhover_alpha="0.6"
	chevrons_shadow_borderwidth="1"
	chevrons_shadow_border_alpha="0.5"
	floating_arrow_text="Show/Hide floating arrow"
	chevron_arrows_text="Show/Hide chevron arrows"
	navigation_hotspots_text="Show/Hide navigation hotspots"
	floating_arrow_autohide_text="Auto hide floating arrow"
	hide_on_autorotate="false"
	chevrons_updatedelay_desktop="1"
	chevrons_updatedelay_mobile="0"
	logkey_enable="false"
	disabled_panoids=""
	password_protect="false"
	password="garrows"
/>
<include url="%FIRSTXML%/graphics/garrows/garrows.xml" />



<!-- ********* -->
<!-- Gyroscope -->
<!-- ********* -->


<plugin name="gyroscope"
        url="%FIRSTXML%/graphics/gyro2.js"
        keep="true"
        devices="no-desktop.and.html5"

        onunavailable="checkGyroUnavailable();"
        sensor_mode="1"
        friction="auto"
        autocalibration="true"
        touch_mode="full"
        onavailable="delayedcall(1, checkGyroAvailability(););"
        enabled="false"
        activated="false"
        />

<events name="gyroscopeEvents" onnewpano="planarGyroscopeTest();" keep="true" />

<action name="planarGyroscopeTest">
  if(plugin[gyroscope],
    if(scene[get(xml.scene)].full360,
      set(sceneisfull360, false);
      sub(viewhfov, panoview.hmax, panoview.hmin);
      if (viewhfov == 360,
        sub(viewvfov, panoview.vmax, panoview.vmin);
        if (viewvfov == 180,
          set(sceneisfull360, true);
        );
      );
      if (sceneisfull360,
        set(plugin[gyroscope].camroll, true);
      ,
        set(plugin[gyroscope].camroll, false);
      );
    ,
      set(plugin[gyroscope].camroll, false);
    );
  );
</action>

<action name="changeGyroscopeState">
  if(plugin[gyroscope],
    if (plugin[gyroscope].isavailable,
      if(%1,
        set(plugin[gyroscope].activated,true);
      ,
        set(plugin[gyroscope].activated,false);
      );
      if (%1 != plugin[gyroscope].enabled,
        if(plugin[gyroscope].activated,
          switch(plugin[gyroscope].enabled);
        ,
          set(plugin[gyroscope].enabled, false);
        );
        if (plugin[gyroscope].enabled, events.dispatch(ongyroscopeon);, events.dispatch(ongyroscopeoff););
      );
    );
  );
</action>

<action name="checkGyroAvailability">
  if(plugin[gyroscope],
    if (plugin[gyroscope].isavailable,
      
      set(sceneisfull360, false);
      if (scene[get(xml.scene)].full360,
        sub(viewhfov, panoview.hmax, panoview.hmin);
        if (viewhfov == 360,
          sub(viewvfov, panoview.vmax, panoview.vmin);
          if (viewvfov == 180,
            set(sceneisfull360, true);
          );
        );
      );
      set(delaythegyrocheck, false);
      if (sceneisfull360 AND tour_firstlittleplanet, set(delaythegyrocheck, true));

      ifnot(delaythegyrocheck,
        switch(plugin[gyroscope].enabled);
        set(plugin[gyroscope].activated,true);
        set(tour_gyroscopedevices, true);
        events.dispatch(ongyroscopeavailable);
      ,
        delayedcall(1, checkGyroAvailability(););
      );
    ,
      set(tour_gyroscopedevices, false);
    );
    if (plugin[gyroscope].enabled, events.dispatch(ongyroscopeon);, events.dispatch(ongyroscopeoff););
  ,
    checkGyroUnavailable();
  );
</action>

<action name="checkGyroUnavailable">
  set(plugin[gyroscope].activated, false);
  set(plugin[gyroscope].enabled, false);
  set(tour_gyroscopedevices, false);
  events.dispatch(ongyroscopeunavailable);
</action>

<!-- ********** -->
<!-- Hide interface on idle -->
<!-- id : hideonidle -->
<!-- ********** -->
    <events onxmlcomplete="set(idletime,10.0);" 
		    onidle="
					 
					startautotour(); 
					     hideFloorplan();


   
				 "/>


<!-- ********** -->
<!-- Floor plan -->
<!-- id : floorPlan -->
<!-- ********** -->

	<ptplugin name="floorPlan" engine="KolorFloorPlan">
		<settings>
			<option name="background_color" value="f2f2f2" type="string" />
			<option name="background_lighter_color" value="ffffff" type="string" />
			<option name="background_darker_color" value="cacaca" type="string" />
			<option name="background_alpha" value="0" type="float" />
			<option name="text_color" value="000000" type="string" />

			<option name="resize" value="true" type="bool" />
			<option name="fp_selector" value="one" type="string" />
			<option name="fp_selector_label" value="floorPlanmenu_label" type="string" />
			<option name="display_title" value="false" type="bool" />
			<option name="title_font" value="Verdana" type="string" />
			<option name="title_size" value="14" type="int" />
			<option name="title_weight" value="normal" type="string" />
			<option name="title_decoration" value="normal" type="string" />
			<option name="title_color" value="000000" type="string" />
			<option name="display_orientation" value="false" type="bool" />
			<option name="display_radar" value="true" type="bool" />
			<option name="radar_radius" value="50" type="int" />
			<option name="radar_line_width" value="1" type="int" />
			<option name="radar_line_color" value="ed8634" type="string" />
			<option name="radar_line_alpha" value="0.46666666666666667" type="float" />
			<option name="radar_fill_color" value="ed8634" type="string" />
			<option name="radar_fill_alpha" value="0.29803921568627451" type="float" />
			<option name="selected_effect" value="bounce" type="string" />
			<option name="close_on_click" value="true" type="bool" />
			<option name="position" value="topright" type="string" />
			<option name="zorder" value="9" type="int" />
			<option name="use_i18n" value="true" type="bool" />
		</settings>
		
		<floorplanItems selectedItem="" selectedSpot="" selectedSpotScene="" selectedSpotHeading="" selectedSpotFov="">
			
			
							<floorplanItem 
								name="fpitempanogroup10768" 
								width="2000" 
								height="1823" 
								groupName="panogroup10768" 
								url="floorplan/floor01_panogroup10768.png" 
								title="panogroup10768_floor_title"
								heading="0">
										<spot name="spotmap10889" posX="0.606936395" posY="0.310126573" heading="-136.80000000000015" desc="spotmap10889_tooltip" descType="tooltip" groupName="" isScene="true" planar="false" scene="pano10767" jsClick="spotmap10889ActionSpotFloorPlan">
											<icon url="spots/hotspot_plan_user_defaultmap0.png" iconWidth="30" iconHeight="30" iconAnchor="center" />
										</spot>
										<spot name="spotmap10890" posX="0.112716764" posY="0.319620252" heading="118.79999999999984" desc="spotmap10890_tooltip" descType="tooltip" groupName="" isScene="true" planar="false" scene="pano10769" jsClick="spotmap10890ActionSpotFloorPlan">
											<icon url="spots/hotspot_plan_user_defaultmap0.png" iconWidth="30" iconHeight="30" iconAnchor="center" />
										</spot>
										<spot name="spotmap10891" posX="0.202312142" posY="0.829113901" heading="-37.800000000000011" desc="spotmap10891_tooltip" descType="tooltip" groupName="" isScene="true" planar="false" scene="pano10771" jsClick="spotmap10891ActionSpotFloorPlan">
											<icon url="spots/hotspot_plan_user_defaultmap0.png" iconWidth="30" iconHeight="30" iconAnchor="center" />
										</spot>
										<spot name="spotmap10892" posX="0.670520246" posY="0.844936728" heading="-54.199999999999989" desc="spotmap10892_tooltip" descType="tooltip" groupName="" isScene="true" planar="false" scene="pano10775" jsClick="spotmap10892ActionSpotFloorPlan">
											<icon url="spots/hotspot_plan_user_defaultmap0.png" iconWidth="30" iconHeight="30" iconAnchor="center" />
										</spot>
										<spot name="spotmap10893" posX="0.791907489" posY="0.83227849" heading="0" desc="spotmap10893_tooltip" descType="tooltip" groupName="" isScene="true" planar="false" scene="pano10777" jsClick="spotmap10893ActionSpotFloorPlan">
											<icon url="spots/hotspot_plan_user_defaultmap0.png" iconWidth="30" iconHeight="30" iconAnchor="center" />
										</spot>
										<spot name="spotmap10894" posX="0.78901732" posY="0.560126603" heading="36.80000000000004" desc="spotmap10894_tooltip" descType="tooltip" groupName="" isScene="true" planar="false" scene="pano10779" jsClick="spotmap10894ActionSpotFloorPlan">
											<icon url="spots/hotspot_plan_user_defaultmap0.png" iconWidth="30" iconHeight="30" iconAnchor="center" />
										</spot>
										<spot name="spotmap10898" posX="0.421965331" posY="0.778481007" heading="-177.00000000000003" desc="spotmap10898_tooltip" descType="tooltip" groupName="" isScene="true" planar="false" scene="pano10773" jsClick="spotmap10898ActionSpotFloorPlan">
											<icon url="spots/hotspot_plan_user_defaultmap0.png" iconWidth="30" iconHeight="30" iconAnchor="center" />
										</spot>
							</floorplanItem>
							<floorplanItem 
								name="fpitempanogroup10782" 
								width="2000" 
								height="1373" 
								groupName="panogroup10782" 
								url="floorplan/floor02_panogroup10782.png" 
								title="panogroup10782_floor_title"
								heading="0">
										<spot name="spotmap10896" posX="0.904347837" posY="0.553797483" heading="-139.19999999999996" desc="spotmap10896_tooltip" descType="tooltip" groupName="" isScene="true" planar="false" scene="pano10781" jsClick="spotmap10896ActionSpotFloorPlan">
											<icon url="spots/hotspot_plan_user_defaultmap0.png" iconWidth="30" iconHeight="30" iconAnchor="center" />
										</spot>
										<spot name="spotmap10897" posX="0.408695638" posY="0.686708868" heading="173.39999999999998" desc="spotmap10897_tooltip" descType="tooltip" groupName="" isScene="true" planar="false" scene="pano10783" jsClick="spotmap10897ActionSpotFloorPlan">
											<icon url="spots/hotspot_plan_user_defaultmap0.png" iconWidth="30" iconHeight="30" iconAnchor="center" />
										</spot>
							</floorplanItem>
		</floorplanItems>
	</ptplugin>
	
	<action name="kolorFloorplanJsReady_floorPlan">
		set(ptplugin[floorPlan].jsready, true);
		
		ifnot(ptplugin[floorPlan].floorplanItems.selectedSpot == "",
			set(ptplugin[floorPlan].floorplanItems.selectedSpotFov, get(view.hfov));
			js(invokePluginFunction(floorPlan, setKolorFloorPlanSelectedSpotOptions, get(xml.scene), get(view.hlookat), get(view.hfov)));
		);
	</action>
	
	
	
					<!-- floorplan panogroup10768 spots counter : 7 -->
						<action name="spotmap10889ActionSpotFloorPlan">
          mainloadscene(pano10767);lookat(get(panoview.h), get(panoview.v), get(panoview.fov));

</action>
						<action name="spotmap10890ActionSpotFloorPlan">
          mainloadscene(pano10769);lookat(get(panoview.h), get(panoview.v), get(panoview.fov));

</action>
						<action name="spotmap10891ActionSpotFloorPlan">
          mainloadscene(pano10771);lookat(get(panoview.h), get(panoview.v), get(panoview.fov));

</action>
						<action name="spotmap10892ActionSpotFloorPlan">
          mainloadscene(pano10775);lookat(get(panoview.h), get(panoview.v), get(panoview.fov));

</action>
						<action name="spotmap10893ActionSpotFloorPlan">
          mainloadscene(pano10777);lookat(get(panoview.h), get(panoview.v), get(panoview.fov));

</action>
						<action name="spotmap10894ActionSpotFloorPlan">
          mainloadscene(pano10779);lookat(get(panoview.h), get(panoview.v), get(panoview.fov));

</action>
						<action name="spotmap10898ActionSpotFloorPlan">
          mainloadscene(pano10773);lookat(get(panoview.h), get(panoview.v), get(panoview.fov));

</action>
					<!-- floorplan panogroup10782 spots counter : 2 -->
						<action name="spotmap10896ActionSpotFloorPlan">
          mainloadscene(pano10781);lookat(get(panoview.h), get(panoview.v), get(panoview.fov));

</action>
						<action name="spotmap10897ActionSpotFloorPlan">
          mainloadscene(pano10783);lookat(get(panoview.h), get(panoview.v), get(panoview.fov));

</action>
	
	
	<events name="floorPlanEvents" 
	onxmlcomplete="ifnot(floorPlanFloorPlanLoaded,set(tour_displayfloorplan,true););floorPlanActivateDefaultSpot();" 
	onviewchanged="floorPlanOnViewChange();" 
	onhidetourfloorplan="floorPlanCloseTourFloorPlan();" 
	onshowtourfloorplan="if(tour_displayfloorplan,floorPlanOpenTourFloorPlan(););" 
	onTourStart="floorPlanOpenTourFloorPlan();"
	changetourlanguage="floorPlanChangeLanguage();"
	keep="true" />
	
	<action name="floorPlanChangeLanguage">
		if(ptplugin[floorPlan].jsready,
			stopdelayedcall(delay_floorPlan);
			js(invokePluginFunction(floorPlanArea, changeLanguage, false));
			js(invokePluginFunction(floorPlan, changeLanguage));
		,
			delayedcall(delay_floorPlan, 0.1, floorPlanChangeLanguage(););
		);
	</action>
	
	
	<krpano floorPlanFloorPlanLoaded="false" />
	
	<action name="floorPlanHideTourFloorPlan">
		hideKolorArea_floorPlanArea(true);
	</action>
	
	<action name="floorPlanCloseTourFloorPlan">
		closeKolorArea_floorPlanArea();
	</action>
	
	<action name="floorPlanShowTourFloorPlan">
		if(ptplugin[floorPlanArea].isOpen === null,
			openKolorArea_floorPlanArea();
		,
			showKolorArea_floorPlanArea(true);
		);
	</action>
	
	<action name="floorPlanOpenTourFloorPlan">
		openKolorArea_floorPlanArea();
	</action>
	
	<action name="floorPlanOnViewChange">
		if (floorPlanFloorPlanLoaded == true,
			ifnot(ptplugin[floorPlan].floorplanItems.selectedSpot == "",
				ifnot(scene[get(xml.scene)].planar,
					js(invokePluginFunction(floorPlan, changeDirection, get(xml.scene), get(view.hlookat), get(view.hfov)));
				);
			);
		);
	</action>
	
	<action name="floorPlanActivateSpot">
		
		set(ptplugin[floorPlan].floorplanItems.selectedSpot, %1);
		set(ptplugin[floorPlan].floorplanItems.selectedItem, %2);
		
		if(%1 !== "",
			set(ptplugin[floorPlan].floorplanItems.selectedSpotScene, get(xml.scene));
			set(ptplugin[floorPlan].floorplanItems.selectedSpotHeading, get(view.hlookat));
			set(ptplugin[floorPlan].floorplanItems.selectedSpotFov, get(view.hfov));
		);
		
		
		if(ptplugin[floorPlanArea].isOpen,
			floorPlanSelectActivatedSpot(%1, %2, %3);
		);
	</action>
	
	<action name="floorPlanSelectActivatedSpot">
		js(invokePluginFunction(floorPlan, selectSpot, %1, %2, %3));

		if(%1 !== "",
			if(scene[get(xml.scene)].planar,
				js(invokePluginFunction(floorPlan, hideRadar));
			,
				js(invokePluginFunction(floorPlan, changeDirection, get(xml.scene), get(view.hlookat), get(view.hfov)));
			);
		);
	</action>
	
	<action name="floorPlanDeactivateSpot">
		set(ptplugin[floorPlan].floorplanItems.selectedSpot, "");
		
		js(invokePluginFunction(floorPlan, unselectSpot));
	</action>
	
	<action name="floorPlanActivateDefaultSpot">
		set(floorPlanFloorPlanLoaded, true);
		
		set(floorPlanSpotFound, "");
		set(floorPlanSpotScene, "");
		set(floorPlanItemFound, "");
		set(floorPlanItemSearch, true);
		set(floorPlanSpotSearchActivated, true);
		set(floorPlanSpotSearchContinue, true);
		
		
		for(set(defaultfloorplaniteminc,0), defaultfloorplaniteminc LT ptplugin[floorPlan].floorplanItems.floorplanItem.count , inc(defaultfloorplaniteminc),
                        if(floorPlanSpotSearchActivated == true,
				
				if(ptplugin[floorPlan].floorplanItems.floorplanItem[get(defaultfloorplaniteminc)].groupName == scene[get(xml.scene)].group,
					set(floorPlanItemFound, get(ptplugin[floorPlan].floorplanItems.floorplanItem[get(defaultfloorplaniteminc)].name));
					set(ptplugin[floorPlan].floorplanItems.selectedItem, get(ptplugin[floorPlan].floorplanItems.floorplanItem[get(defaultfloorplaniteminc)].name));
					set(floorPlanItemSearch, false);
				,
					
					if(floorPlanItemFound == "",
						set(floorPlanItemFound, get(ptplugin[floorPlan].floorplanItems.floorplanItem[get(defaultfloorplaniteminc)].name));
					);
				);
			);
			if(floorPlanSpotSearchActivated == true,
                                for(set(defaultspotinc,0), defaultspotinc LT ptplugin[floorPlan].floorplanItems.floorplanItem[get(defaultfloorplaniteminc)].spot.count , inc(defaultspotinc),
                                        if(ptplugin[floorPlan].floorplanItems.floorplanItem[get(defaultfloorplaniteminc)].spot[get(defaultspotinc)].isScene == true,
					
						if(floorPlanSpotSearchContinue == true,
							if(ptplugin[floorPlan].floorplanItems.floorplanItem[get(defaultfloorplaniteminc)].spot[get(defaultspotinc)].scene == xml.scene,
								set(floorPlanSpotFound, get(ptplugin[floorPlan].floorplanItems.floorplanItem[get(defaultfloorplaniteminc)].spot[get(defaultspotinc)].name));
								set(floorPlanSpotScene, get(ptplugin[floorPlan].floorplanItems.floorplanItem[get(defaultfloorplaniteminc)].spot[get(defaultspotinc)].scene));
								set(ptplugin[floorPlan].floorplanItems.selectedItem, get(ptplugin[floorPlan].floorplanItems.floorplanItem[get(defaultfloorplaniteminc)].name));
								if(floorPlanItemSearch == false,
									set(floorPlanSpotSearchContinue, false);
									set(floorPlanSpotSearchActivated, false);
								);
							);
						);
					);
					
				);
			);
		);
		
		if(floorPlanSpotFound == "",
			
			
			floorPlanDeactivateSpot();
			
			
			set(ptplugin[floorPlan].floorplanItems.selectedItem, get(floorPlanItemFound));
			
			
			ifnot(ptplugin[floorPlan].floorplanItems.selectedItem == "",
				floorPlanActivateSpot("", get(ptplugin[floorPlan].floorplanItems.selectedItem), "");
			);
		,
			
			floorPlanActivateSpot(get(floorPlanSpotFound), get(ptplugin[floorPlan].floorplanItems.selectedItem), get(floorPlanSpotScene));
		);
	</action>
	
	<action name="floorPlanChangeTitle">
		js(invokePluginFunction(floorPlan, changeTitle, %1));
	</action>
	
	<ptplugin name="floorPlanArea" engine="kolorArea">
	<settings>
		<option name="position" value="topright" type="string" />
		<option name="start_position" value="right" type="string" />
		<option name="margin_x" value="0" type="int" />
		<option name="margin_y" value="0" type="int" />
		<option name="display_title" value="false" type="bool" />
		<option name="title_font" value="Verdana" type="string" />
		<option name="title_size" value="14" type="int" />
		<option name="title_weight" value="normal" type="string" />
		<option name="title_decoration" value="normal" type="string" />
		<option name="title_color" value="000000" type="string" />
		<option name="close_displayed" value="false" type="bool" />
		<option name="close_text" value="floorPlandisplay_close_text" type="string" />

		<option name="background_color" value="f2f2f2" type="string" />
		<option name="background_alpha" value="0" type="float" />
		<option name="overlay_displayed" value="false" type="bool" />
		<option name="overlay_color" value="ffffff" type="string" />
		<option name="overlay_alpha" value="0.40000000000000002" type="float" />

		<option name="padding" value="0" type="int" />
		<option name="topleft_radius" value="0" type="int" />
		<option name="topright_radius" value="0" type="int" />
		<option name="bottomleft_radius" value="0" type="int" />
		<option name="bottomright_radius" value="0" type="int" />
		<option name="area_border_width" value="0" type="int" />
		<option name="area_border_color" value="f2f2f2" type="string" />
		<option name="area_border_alpha" value="0" type="float" />
		<option name="area_width" value="20" type="int" />
		<option name="area_height" value="30" type="int" />
		<option name="area_width_unit" value="percent" type="string" />
		<option name="area_height_unit" value="percent" type="string" />
		<option name="animation" value="true" type="bool" />
		<option name="animation_duration" value="500" type="int" />
		<option name="close_on_click" value="true" type="bool" />
		<option name="refresh_content" value="false" type="bool" />
		<option name="open_callback" value="addKolorFloorPlan('floorPlan', 'floorPlanArea_floorplanDIV');" type="string" />
		<option name="close_callback" value="invokeKrFunction('closeKolorAreaCallback_floorPlanArea')" type="string" />
		<option name="zorder" value="9" type="int" />
		<option name="use_i18n" value="true" type="bool" />
	</settings>
	</ptplugin>
	
	<action name="kolorAreaJsReady_floorPlanArea">
		set(ptplugin[floorPlanArea].jsready, true);

		inc(tour_autorotation_openatstartplugin);
		set(ptplugin[floorPlanArea].autorotateBlocked, true);

	</action>
	
	<action name="openKolorArea_floorPlanArea">
		ifnot(ptplugin[floorPlanArea].isOpen,
			set(ptplugin[floorPlanArea].isOpen, true);
			pauseautorotation(forceplugin);

			js(showKolorArea(floorPlanArea, &lt;div id="floorPlanArea_floorplanDIV"&gt;&lt;/div&gt;));
			
			if(ptplugin[floorPlan].floorplanItems.selectedSpot != "",
				floorPlanSelectActivatedSpot(get(ptplugin[floorPlan].floorplanItems.selectedSpot), get(ptplugin[floorPlan].floorplanItems.selectedItem), get(ptplugin[floorPlan].floorplanItems.selectedSpotScene));
			);
			events.dispatch(onremovedisplayedobject);
		);
	</action>
	
	<action name="closeKolorArea_floorPlanArea">
		if(ptplugin[floorPlanArea].isOpen,
			js(invokePluginFunction(floorPlanArea, closeKolorArea));
		);
	</action>
	
	<action name="toggleKolorArea_floorPlanArea">
		if(ptplugin[floorPlanArea].isOpen,
			closeKolorArea_floorPlanArea();
		,
			openKolorArea_floorPlanArea();
		);
	</action>
	
	<action name="closeKolorAreaCallback_floorPlanArea">
		if(ptplugin[floorPlanArea].isOpen,resumeautorotation(forceplugin);

			if(ptplugin[floorPlanArea].autorotateBlocked,if(tour_autorotation_openatstartplugin GT 0,dec(tour_autorotation_openatstartplugin);set(ptplugin[floorPlanArea].autorotateBlocked,false);););
		);
		set(ptplugin[floorPlanArea].isOpen, false);hideFloorplan();

	</action>
	
	<action name="changeTitleKolorArea_floorPlanArea">
		js(invokePluginFunction(floorPlanArea, changeTitle, %1));
	</action>
	
	<action name="showKolorArea_floorPlanArea">
		set(ptplugin[floorPlanArea].isOpen, true);
		pauseautorotation(forceplugin);

		js(invokePluginFunction(floorPlanArea, showKolorArea, %1));
		events.dispatch(onremovedisplayedobject);
	</action>
		
	<action name="hideKolorArea_floorPlanArea">
		resumeautorotation(forceplugin);

		if(ptplugin[floorPlanArea].autorotateBlocked,if(tour_autorotation_openatstartplugin GT 0,dec(tour_autorotation_openatstartplugin);set(ptplugin[floorPlanArea].autorotateBlocked,false);););
		set(ptplugin[floorPlanArea].isOpen, false);
		js(invokePluginFunction(floorPlanArea, hideKolorArea, %1));
	</action>
	
	<events name="kolorAreaEvents_floorPlanArea" 
		keep="true"
	/>
	

<!-- ********** -->
<!-- Simple Thumbnails Bar -->
<!-- id : thumbnailsBar -->
<!-- ********** -->







<layer name="thumbnailsBar_thumbnailsBar"
	keep="true"
	type="container"
	visible="false"
	align="top"

		width="50%"
		height="0"
		

	x="0"
	y="0"

	bgcolor="0xdedede"
	bgalpha="0.10000762951094835"

	zorder="10"
/>



<layer name="thumbnailBorderSource_thumbnailsBar"
	keep="true"
	visible="false"

	borderWidth="2"
	borderColorDefault="0xe6e6e6" 
	borderColorHover="0xffffff"
	borderColorSelected="0xffffff"
	borderAlphaDefault="0.50000762951094835" 
	borderAlphaHover="1"
	borderAlphaSelected="1"

	url=""
	offsetX="0"
	offsetY="0"
	quarterHeight="0"
/>



  <layer name="tooltipStyle_thumbnailsBar"
	       keep="true"
	       enabled="false"
         capture="false"
	       type="text"
         align="center"
         bg="false"
         bgborder="0"
         css="color:#ffffff;font-family:Helvetica;font-weight:bold;font-size:14px;text-align:left;"
         interactivecontent="false"
         zorder="0"
         padding="2"
         xoffset="0"
         yoffset="0"
         visible="false"
         html=""
         edge="top"
         />

	
	<krpano arrow1Loaded_thumbnailsBar="false" arrow2Loaded_thumbnailsBar="false" borderLoaded_thumbnailsBar="false" thumbnailsLoadedCounter_thumbnailsBar="0" thumbsCount_thumbnailsBar="0" thumbsCounter_thumbnailsBar="0" firstInit_thumbnailsBar="false" />
	
	
	<events name="thumbnailsScrollEvents_thumbnailsBar" 
		keep="true" 
		
		onxmlcomplete="ifnot(startResize_thumbnailsBar,set(isLoaded_thumbnailsBar, true);if(isStarted_thumbnailsBar,onLoadCompleteHandler_thumbnailsBar();););"
		onTourStart="set(isStarted_thumbnailsBar, true);if(isLoaded_thumbnailsBar,onLoadCompleteHandler_thumbnailsBar(););"
		onnewpano="if(startResize_thumbnailsBar,if(firstInit_thumbnailsBar,onLoadCompleteHandler_thumbnailsBar();););"
		onresize="onResizeHandler_thumbnailsBar();"
		hidetourthumbnails="hideWithThumbnailsButton_thumbnailsBar();" 
		showtourthumbnails="showWithThumbnailsButton_thumbnailsBar();" 
		hidetourcontrols="hideWithControlsBar_thumbnailsBar();" 
		showtourcontrols="showWithControlsBar_thumbnailsBar();" 
		onenterfullscreen="delayedcall(0.2,scrollToCurrentThumb_thumbnailsBar(););"
		onexitfullscreen="delayedcall(0.2,scrollToCurrentThumb_thumbnailsBar(););"	
	/>
	
	
	<layer name="scrollAreaContainer_thumbnailsBar" 
         keep="true"
         type="container" 
         align="topleft" x="10" y="10"
         marginX="10"
         marginY="10"
         width="0" height="0"
         targetWidth="0"
         targetHeight="0"
         scrollSpeedInit="10"
         scrollSpeed="10"
         scrollSpeedMax="70"
         scrollSpeedAcceleration="20"
         parent="thumbnailsBar_thumbnailsBar"
         thumbWidth="0"
         thumbHeight="0"
         itemWidth="100"
         itemHeight="50"
         offsetX="0" offsetY="0"
         thumbSpacer="10"
         currentThumbsCount="0"
         adjustToContent="false"
         zorder="1"
         visible="false"
         ready="false">
	
		
    <layer name="thumbsScrollArea_thumbnailsBar"
           url.flash="%FIRSTXML%/graphics/scrollarea.swf"
           url.html5="%FIRSTXML%/graphics/scrollarea.js"
           align="top" x="0" y="0"
           onhover_autoscrolling="false"
           direction="h"/>
	
	</layer>
	
	
	<layer name="scrollPrevArrow_thumbnailsBar" 
         keep="true"
         type="image"
         visible="false"
         parent="thumbnailsBar_thumbnailsBar"
         targetHeight="0"
         targetWidth="0"
         zorder="2"
         onloaded="loadedImages_thumbnailsBar(arrow1);"
         url="%FIRSTXML%/graphics/thumbnailsbar/btn_scroll_left.png"
         align="left"
	/>
	
	
	<layer name="scrollNextArrow_thumbnailsBar" 
         keep="true"
         type="image"
         visible="false"
         parent="thumbnailsBar_thumbnailsBar"
         targetHeight="0"
         targetWidth="0"
         zorder="2"
         onloaded="loadedImages_thumbnailsBar(arrow2);"
         url="%FIRSTXML%/graphics/thumbnailsbar/btn_scroll_right.png"
         align="right"
	/>
	
	<action name="loadedImages_thumbnailsBar">
		if(%1 == "arrow1",
			set(arrow1Loaded_thumbnailsBar, true);
		);
		if(%1 == "arrow2",
			set(arrow2Loaded_thumbnailsBar, true);
		);
		if(%1 == "border",
			if(layer[thumbnailBorderSource_thumbnailsBar].url,
				set(borderLoaded_thumbnailsBar, true);
			);
		);
		if(%1 == "thumbnail",
			inc(thumbnailsLoadedCounter_thumbnailsBar);
		);
	</action>
	
	<action name="onLoadCompleteHandler_thumbnailsBar">
		
		set(thumbsCount_thumbnailsBar, 0);
		
		
		set(thumbsCount_thumbnailsBar, get(scene.count));
		
		
		
		
		
		
		
		loadThumbs_thumbnailsBar();
		
		if(firstInit_thumbnailsBar,
			onLoadCompleteHandlerPartThree_thumbnailsBar();
		,
			onLoadCompleteHandlerPartTwo_thumbnailsBar();
		);
	</action>
	
	<action name="onLoadCompleteHandlerPartTwo_thumbnailsBar">
		set(imgCounter_thumbnailsBar, 3);
		
		if(arrow1Loaded_thumbnailsBar,
			dec(imgCounter_thumbnailsBar);
		);
		if(arrow2Loaded_thumbnailsBar,
			dec(imgCounter_thumbnailsBar);
		);
		if(thumbsCount_thumbnailsBar == thumbnailsLoadedCounter_thumbnailsBar,
			dec(imgCounter_thumbnailsBar);
		);
		
		if(imgCounter_thumbnailsBar LE 0,
			stopdelayedcall(delayedCallOnLoadComplete_thumbnailsBar);
			onLoadCompleteHandlerPartThree_thumbnailsBar();
		,
			delayedcall(delayedCallOnLoadComplete_thumbnailsBar, 0.2, onLoadCompleteHandlerPartTwo_thumbnailsBar());
		);
	</action>
	
	<action name="onLoadCompleteHandlerPartThree_thumbnailsBar">
		resetMouseBehavior_thumbnailsBar();
		highlightCurrentThumb_thumbnailsBar();
		
		
		if(layer[scrollAreaContainer_thumbnailsBar].adjustToContent,
			mul(adjustWidth_thumbnailsBar, get(layer[scrollAreaContainer_thumbnailsBar].marginX), 2);
			add(adjustWidth_thumbnailsBar, get(layer[thumbsScrollArea_thumbnailsBar].width));
			mul(adjustHeight_thumbnailsBar, get(layer[scrollAreaContainer_thumbnailsBar].marginY), 2);
			add(adjustHeight_thumbnailsBar, get(layer[thumbsScrollArea_thumbnailsBar].height));
			
			
			if(adjustWidth_thumbnailsBar GT stagewidth,
				set(adjustWidth_thumbnailsBar, get(stagewidth));
				set(layer[scrollAreaContainer_thumbnailsBar].adjustToContent, false);
			,
				if(adjustHeight_thumbnailsBar GT stageheight,
					set(adjustHeight_thumbnailsBar, get(stageheight));
					set(layer[scrollAreaContainer_thumbnailsBar].adjustToContent, false);
				);
			);
			
			setSize_thumbnailsBar(get(adjustWidth_thumbnailsBar), get(adjustHeight_thumbnailsBar));
		);
		
		setupArrows_thumbnailsBar(true);
		
		
		if (thumbsCounter_thumbnailsBar LE 0,
			set(layer[thumbnailsBar_thumbnailsBar].visible, false);
		);
		
		
		set(startResize_thumbnailsBar, true);
		set(firstInit_thumbnailsBar, true);
	</action>
	
	
	<action name="onResizeHandler_thumbnailsBar">
		
		delayedcall(0.1, onResizeCallback_thumbnailsBar(false); );
	</action>
	
	
	<action name="onResizeCallback_thumbnailsBar">
		if(startResize_thumbnailsBar,
			setSize_thumbnailsBar(get(layer[scrollAreaContainer_thumbnailsBar].targetWidth), get(layer[scrollAreaContainer_thumbnailsBar].targetHeight));
			setupArrows_thumbnailsBar(%1);
			
			
			if (thumbsCounter_thumbnailsBar LE 0,
				set(layer[thumbnailsBar_thumbnailsBar].visible, false);
			);
		);
	</action>
	
	
		<action name="showWithThumbnailsButton_thumbnailsBar">
			set(layer[thumbnailsBar_thumbnailsBar].visible, true);
			onResizeCallback_thumbnailsBar(true);
		</action>
		
		<action name="hideWithThumbnailsButton_thumbnailsBar">
			set(layer[thumbnailsBar_thumbnailsBar].visible, false);
		</action>
	
	
		<action name="showWithControlsBar_thumbnailsBar">
			
				if (tour_displaythumbnails,
					set(layer[thumbnailsBar_thumbnailsBar].visible, true);
					onResizeCallback_thumbnailsBar(true);
				,
					set(layer[thumbnailsBar_thumbnailsBar].visible, false);
				);
		</action>
		
		<action name="hideWithControlsBar_thumbnailsBar">
			set(layer[thumbnailsBar_thumbnailsBar].visible, false);
		</action>
	
	
	<action name="thumbnailBorderDrawInit_thumbnailsBar">
		
		set(layer[scrollAreaContainer_thumbnailsBar].offsetX, get(layer[thumbnailBorderSource_thumbnailsBar].borderWidth));
		set(layer[scrollAreaContainer_thumbnailsBar].offsetY, get(layer[thumbnailBorderSource_thumbnailsBar].borderWidth));
		
		
		mul(totalOffsetX_thumbnailsBar, get(layer[thumbnailBorderSource_thumbnailsBar].borderWidth), 2);
		mul(totalOffsetY_thumbnailsBar, get(layer[thumbnailBorderSource_thumbnailsBar].borderWidth), 2);
		
		
		if(startResize_thumbnailsBar,
			sub(layer[scrollAreaContainer_thumbnailsBar].itemWidth, get(totalOffsetX_thumbnailsBar));
			sub(layer[scrollAreaContainer_thumbnailsBar].itemHeight, get(totalOffsetY_thumbnailsBar));
		);
		
		
		set(layer[scrollAreaContainer_thumbnailsBar].thumbWidth, get(layer[scrollAreaContainer_thumbnailsBar].itemWidth));
		set(layer[scrollAreaContainer_thumbnailsBar].thumbHeight, get(layer[scrollAreaContainer_thumbnailsBar].itemHeight));
		
		add(layer[scrollAreaContainer_thumbnailsBar].itemWidth, get(totalOffsetX_thumbnailsBar));
		add(layer[scrollAreaContainer_thumbnailsBar].itemHeight, get(totalOffsetY_thumbnailsBar));
	</action>
		
	
	<action name="thumbnailBorderImageInit_thumbnailsBar">
		
		set(layer[scrollAreaContainer_thumbnailsBar].offsetX, get(layer[thumbnailBorderSource_thumbnailsBar].offsetX));
		set(layer[scrollAreaContainer_thumbnailsBar].offsetY, get(layer[thumbnailBorderSource_thumbnailsBar].offsetY));
		
		
		mul(totalOffsetX_thumbnailsBar, get(layer[thumbnailBorderSource_thumbnailsBar].offsetX), 2);
		mul(totalOffsetY_thumbnailsBar, get(layer[thumbnailBorderSource_thumbnailsBar].offsetY), 2);
		
		
		if(startResize_thumbnailsBar,
			sub(layer[scrollAreaContainer_thumbnailsBar].itemWidth, get(totalOffsetX_thumbnailsBar));
			sub(layer[scrollAreaContainer_thumbnailsBar].itemHeight, get(totalOffsetY_thumbnailsBar));
		);
		
		
		set(layer[scrollAreaContainer_thumbnailsBar].thumbWidth, get(layer[scrollAreaContainer_thumbnailsBar].itemWidth));
		set(layer[scrollAreaContainer_thumbnailsBar].thumbHeight, get(layer[scrollAreaContainer_thumbnailsBar].itemHeight));
		
		add(layer[scrollAreaContainer_thumbnailsBar].itemWidth, get(totalOffsetX_thumbnailsBar));
		add(layer[scrollAreaContainer_thumbnailsBar].itemHeight, get(totalOffsetY_thumbnailsBar));
		
		
		div(layer[thumbnailBorderSource_thumbnailsBar].quarterHeight, get(layer[thumbnailBorderSource_thumbnailsBar].height), 4);
		
		
		set(cropX_thumbnailsBar, 0);
		set(cropY_thumbnailsBar, 0);
		set(cropW_thumbnailsBar, get(layer[thumbnailBorderSource_thumbnailsBar].width));
		set(cropH_thumbnailsBar, get(layer[thumbnailBorderSource_thumbnailsBar].quarterHeight));
		txtadd(layer[thumbnailBorderSource_thumbnailsBar].cropDefault, get(cropX_thumbnailsBar), '|', get(cropY_thumbnailsBar), '|', get(cropW_thumbnailsBar), '|', get(cropH_thumbnailsBar));

		
		add(cropY_thumbnailsBar, get(layer[thumbnailBorderSource_thumbnailsBar].quarterHeight));
		txtadd(layer[thumbnailBorderSource_thumbnailsBar].cropHover, get(cropX_thumbnailsBar), '|', get(cropY_thumbnailsBar), '|', get(cropW_thumbnailsBar), '|', get(cropH_thumbnailsBar));
		
		
		add(cropY_thumbnailsBar, get(layer[thumbnailBorderSource_thumbnailsBar].quarterHeight));
		txtadd(layer[thumbnailBorderSource_thumbnailsBar].cropSelected, get(cropX_thumbnailsBar), '|', get(cropY_thumbnailsBar), '|', get(cropW_thumbnailsBar), '|', get(cropH_thumbnailsBar));
		
		
		add(cropY_thumbnailsBar, get(layer[thumbnailBorderSource_thumbnailsBar].quarterHeight));
		txtadd(layer[thumbnailBorderSource_thumbnailsBar].cropVisited, get(cropX_thumbnailsBar), '|', get(cropY_thumbnailsBar), '|', get(cropW_thumbnailsBar), '|', get(cropH_thumbnailsBar));
		
		
		set(scaleX_thumbnailsBar, get(layer[thumbnailBorderSource_thumbnailsBar].offsetX));
		set(scaleY_thumbnailsBar, get(layer[thumbnailBorderSource_thumbnailsBar].offsetY));
		sub(scaleW_thumbnailsBar, get(layer[thumbnailBorderSource_thumbnailsBar].width), get(totalOffsetX_thumbnailsBar));
		sub(scaleH_thumbnailsBar, get(layer[thumbnailBorderSource_thumbnailsBar].quarterHeight), get(totalOffsetY_thumbnailsBar));
		txtadd(layer[thumbnailBorderSource_thumbnailsBar].scale9grid, get(scaleX_thumbnailsBar), '|', get(scaleY_thumbnailsBar), '|', get(scaleW_thumbnailsBar), '|', get(scaleH_thumbnailsBar));
	</action>
	
	
	<action name="loadThumbs_thumbnailsBar">
		if(layer[thumbnailBorderSource_thumbnailsBar].url,
			set(imgCounter_thumbnailsBar, 1);
		,
			set(imgCounter_thumbnailsBar, 0);
		);
		
		if(layer[thumbnailBorderSource_thumbnailsBar].url,
			if(borderLoaded_thumbnailsBar,
				dec(imgCounter_thumbnailsBar);
			);
		);
		
		if(imgCounter_thumbnailsBar LE 0,
			stopdelayedcall(delayedCallOnLoadCompleteBorder_thumbnailsBar);
			loadThumbsPartTwo_thumbnailsBar();
		,
			delayedcall(delayedCallOnLoadCompleteBorder_thumbnailsBar, 0.2, loadThumbs_thumbnailsBar());
		);
	</action>
	
	<action name="loadThumbsPartTwo_thumbnailsBar">
		ifnot(layer[scrollAreaContainer_thumbnailsBar].ready,
			
			
			if(layer[thumbnailBorderSource_thumbnailsBar].url,
				thumbnailBorderImageInit_thumbnailsBar();
			,
				thumbnailBorderDrawInit_thumbnailsBar();
			);
			
			
			set(thumbsCounter_thumbnailsBar, 0);
			
			
				for( set(i_thumbnailsBar, 0), i_thumbnailsBar LT scene.count, inc(i_thumbnailsBar),
					createThumb_thumbnailsBar(get(scene[get(i_thumbnailsBar)].name), get(scene[get(i_thumbnailsBar)].thumburl), get(i_thumbnailsBar), get(scene[get(i_thumbnailsBar)].titleid));
					inc(thumbsCounter_thumbnailsBar);
				);
			
			
			
			
			
			
			set(layer[scrollAreaContainer_thumbnailsBar].currentThumbsCount, get(thumbsCounter_thumbnailsBar));
			
			
			setSize_thumbnailsBar(get(layer[get(layer[scrollAreaContainer_thumbnailsBar].parent)].width), get(layer[get(layer[scrollAreaContainer_thumbnailsBar].parent)].height));
			
			
			set(layer[scrollAreaContainer_thumbnailsBar].visible, true);
			
			
				if (tour_displaycontrols,
					showWithControlsBar_thumbnailsBar();
				,
					hideWithControlsBar_thumbnailsBar();
				);
			
			
			set(layer[scrollAreaContainer_thumbnailsBar].ready, true);
		);
	</action>
	
	
	<action name="setSize_thumbnailsBar">
		
		
		set(layer[scrollAreaContainer_thumbnailsBar].targetWidth, %1);
		set(layer[scrollAreaContainer_thumbnailsBar].targetHeight, %2);
		
		
		set(layer[get(layer[scrollAreaContainer_thumbnailsBar].parent)].width, %1);
		set(layer[get(layer[scrollAreaContainer_thumbnailsBar].parent)].height, %2);
		layer[get(layer[scrollAreaContainer_thumbnailsBar].parent)].updatepos();
		
		
		mul(totalMarginX_thumbnailsBar, get(layer[scrollAreaContainer_thumbnailsBar].marginX), 2);
		mul(totalMarginY_thumbnailsBar, get(layer[scrollAreaContainer_thumbnailsBar].marginY), 2);
		
			add(totalPluginHeight_thumbnailsBar, get(totalMarginY_thumbnailsBar), get(layer[scrollAreaContainer_thumbnailsBar].itemHeight));
			
			
			
			if(layer[get(layer[scrollAreaContainer_thumbnailsBar].parent)].pixelheight LT totalPluginHeight_thumbnailsBar,
				set(layer[get(layer[scrollAreaContainer_thumbnailsBar].parent)].height, get(totalPluginHeight_thumbnailsBar));
			);
		
		layer[get(layer[scrollAreaContainer_thumbnailsBar].parent)].updatepos();
		
		
		sub(containerWidth_thumbnailsBar, get(layer[get(layer[scrollAreaContainer_thumbnailsBar].parent)].pixelwidth), get(totalMarginX_thumbnailsBar));
		sub(containerHeight_thumbnailsBar, get(layer[get(layer[scrollAreaContainer_thumbnailsBar].parent)].pixelheight), get(totalMarginY_thumbnailsBar));

		
		set(layer[scrollAreaContainer_thumbnailsBar].width, get(containerWidth_thumbnailsBar));
		set(layer[scrollAreaContainer_thumbnailsBar].height, get(containerHeight_thumbnailsBar));
		
		set(scrollAreaSize_thumbnailsBar, 0);
		
		
		mul(totalThumbsSpacer_thumbnailsBar, get(layer[scrollAreaContainer_thumbnailsBar].currentThumbsCount), get(layer[scrollAreaContainer_thumbnailsBar].thumbSpacer));
		sub(totalThumbsSpacer_thumbnailsBar, get(layer[scrollAreaContainer_thumbnailsBar].thumbSpacer));
		
		set(layer[get(layer[scrollAreaContainer_thumbnailsBar].parent)].visible, true);
		

			mul(scrollAreaSize_thumbnailsBar, get(layer[scrollAreaContainer_thumbnailsBar].itemWidth), get(layer[scrollAreaContainer_thumbnailsBar].currentThumbsCount));
			add(scrollAreaSize_thumbnailsBar, get(totalThumbsSpacer_thumbnailsBar));
			
			set(layer[thumbsScrollArea_thumbnailsBar].width, get(scrollAreaSize_thumbnailsBar));
			set(layer[thumbsScrollArea_thumbnailsBar].height, get(layer[scrollAreaContainer_thumbnailsBar].itemHeight));
			
			
			if(layer[scrollAreaContainer_thumbnailsBar].width LT layer[scrollAreaContainer_thumbnailsBar].itemWidth,
				set(layer[get(layer[scrollAreaContainer_thumbnailsBar].parent)].visible, false);
			,
				verifyThumbnailsBarVisibility_thumbnailsBar();
			);
			
		
		
		if(layer[get(layer[scrollAreaContainer_thumbnailsBar].parent)].width LT 0,
			set(layer[get(layer[scrollAreaContainer_thumbnailsBar].parent)].visible, false);
		);
		
	</action>
	
	
	<action name="verifyThumbnailsBarVisibility_thumbnailsBar">
		if(layer[get(layer[scrollAreaContainer_thumbnailsBar].parent)].visible,
			set(boolValue_thumbnailsBar, false);
			
			if (tour_displaythumbnails,
				if (tour_displaycontrols,
					set(boolValue_thumbnailsBar, true);
				);
			);
			
			set(layer[get(layer[scrollAreaContainer_thumbnailsBar].parent)].visible, get(boolValue_thumbnailsBar));
		);
	</action>
	
	
	<action name="createThumb_thumbnailsBar">

			add(offsetFactor_thumbnailsBar, get(layer[scrollAreaContainer_thumbnailsBar].itemWidth), get(layer[scrollAreaContainer_thumbnailsBar].thumbSpacer));
	
			mul(thumbIncPos_thumbnailsBar, %3, get(offsetFactor_thumbnailsBar));
			
			
			if(layer[thumbnailBorderSource_thumbnailsBar].url,
				add(thumbIncPos_thumbnailsBar, get(layer[scrollAreaContainer_thumbnailsBar].offsetX));
			);
			
		
		mul(negativeOffsetX_thumbnailsBar, get(layer[scrollAreaContainer_thumbnailsBar].offsetX), -1);
		mul(negativeOffsetY_thumbnailsBar, get(layer[scrollAreaContainer_thumbnailsBar].offsetY), -1);
		
		set(thumbName, 'thumb_');
		txtadd(thumbName, %1);
		txtadd(thumbName, '_thumbnailsBar');
		addlayer(get(thumbName));

		

		set(thumbBorderName, 'thumbBorder_');
		txtadd(thumbBorderName, %1);
		txtadd(thumbBorderName, '_thumbnailsBar');
		addlayer(get(thumbBorderName));
		
		
		ifnot(layer[thumbnailBorderSource_thumbnailsBar].url,
			set(layer[get(thumbBorderName)].type, container);
			set(layer[get(thumbBorderName)].parent, thumbsScrollArea_thumbnailsBar);
		);

		
		set(layer[get(thumbName)].onloaded, loadedImages_thumbnailsBar("thumbnail"););
		set(layer[get(thumbName)].url, %2);
		set(layer[get(thumbName)].keep, true);
		set(layer[get(thumbName)].width, get(layer[scrollAreaContainer_thumbnailsBar].thumbWidth));
		set(layer[get(thumbName)].height, get(layer[scrollAreaContainer_thumbnailsBar].thumbHeight));
		set(layer[get(thumbName)].align, topleft);
		
		
			set(layer[get(thumbName)].y, get(layer[scrollAreaContainer_thumbnailsBar].offsetY));
		
			if(layer[thumbnailBorderSource_thumbnailsBar].url,
				set(layer[get(thumbName)].parent, thumbsScrollArea_thumbnailsBar);
				set(layer[get(thumbName)].x, get(thumbIncPos_thumbnailsBar));
			,
				set(layer[get(thumbName)].parent, get(thumbBorderName));
				set(layer[get(thumbName)].x, get(layer[scrollAreaContainer_thumbnailsBar].offsetX));
				set(layer[get(thumbName)].onclick, resetMouseBehavior_thumbnailsBar(); mainloadscene(%1); delayedcall(0.1,highlightThumb_thumbnailsBar(%1)));
			);	
			
		
		
		set(layer[get(thumbBorderName)].keep, true);
		set(layer[get(thumbBorderName)].width, get(layer[scrollAreaContainer_thumbnailsBar].itemWidth));
		set(layer[get(thumbBorderName)].height, get(layer[scrollAreaContainer_thumbnailsBar].itemHeight));
		set(layer[get(thumbBorderName)].align, topleft);
		
		if(layer[thumbnailBorderSource_thumbnailsBar].url,
			set(layer[get(thumbBorderName)].url, get(layer[thumbnailBorderSource_thumbnailsBar].url));
			set(layer[get(thumbBorderName)].scale9grid, get(layer[thumbnailBorderSource_thumbnailsBar].scale9grid));
			set(layer[get(thumbBorderName)].parent, get(thumbName));
			set(layer[get(thumbBorderName)].x, get(negativeOffsetX_thumbnailsBar));
			set(layer[get(thumbBorderName)].y, get(negativeOffsetY_thumbnailsBar));
			set(layer[get(thumbBorderName)].onclick, resetMouseBehavior_thumbnailsBar(); mainloadscene(%1); delayedcall(0.1,highlightThumb_thumbnailsBar(%1)));
		,
			
				set(layer[get(thumbBorderName)].x, get(thumbIncPos_thumbnailsBar)); 
				
		);


		
		setupMouseBehavior_thumbnailsBar(%1, %4);
		
	</action>
	
	
	
	<action name="removeThumb_thumbnailsBar">
		set(thumbName, 'thumb_');
		txtadd(thumbName, %1);
		txtadd(thumbName, '_thumbnailsBar');
		removelayer(get(thumbName));
		
		set(thumbBorderName, 'thumbBorder_');
		txtadd(thumbBorderName, %1);
		txtadd(thumbBorderName, '_thumbnailsBar');
		removelayer(get(thumbBorderName));


	</action>
	
	
	
	<action name="setupArrows_thumbnailsBar">
		
		if(layer[scrollAreaContainer_thumbnailsBar].adjustToContent,
			hideArrows_thumbnailsBar();
		,
			ifnot(device.touchdevice,
				
					if(layer[scrollAreaContainer_thumbnailsBar].width LT layer[thumbsScrollArea_thumbnailsBar].width,
				
					showArrows_thumbnailsBar();
				,
					hideArrows_thumbnailsBar();
				);
			,
				hideArrows_thumbnailsBar();
			);
		);
		
		
		if(%1,
			scrollToCurrentThumb_thumbnailsBar();
		);
		
		
			
			if(layer[scrollAreaContainer_thumbnailsBar].width LT layer[scrollAreaContainer_thumbnailsBar].itemWidth,
				set(layer[get(layer[scrollAreaContainer_thumbnailsBar].parent)].visible, false);
			);
	</action>
	
	
	<action name="showArrows_thumbnailsBar">
		
		
		
		
		set(layer[scrollPrevArrow_thumbnailsBar].visible, true);
		set(layer[scrollNextArrow_thumbnailsBar].visible, true);
		
		
		
			
			add(totalArrowSize_thumbnailsBar, get(layer[scrollPrevArrow_thumbnailsBar].width), get(layer[scrollNextArrow_thumbnailsBar].width));
		
			
			sub(scrollAreaContainerSize_thumbnailsBar, get(layer[get(layer[scrollAreaContainer_thumbnailsBar].parent)].pixelwidth), get(totalArrowSize_thumbnailsBar));
		
			set(layer[scrollAreaContainer_thumbnailsBar].width, get(scrollAreaContainerSize_thumbnailsBar));
			
			set(layer[scrollAreaContainer_thumbnailsBar].x, get(layer[scrollPrevArrow_thumbnailsBar].width));
			
		
		
		set(layer[scrollPrevArrow_thumbnailsBar].onhover, scrollPrev_thumbnailsBar(););
		set(layer[scrollNextArrow_thumbnailsBar].onhover, scrollNext_thumbnailsBar(););
		
		set(layer[scrollPrevArrow_thumbnailsBar].onclick, scrollPrev_thumbnailsBar(get(layer[scrollAreaContainer_thumbnailsBar].scrollSpeedAcceleration)););
		set(layer[scrollNextArrow_thumbnailsBar].onclick, scrollNext_thumbnailsBar(get(layer[scrollAreaContainer_thumbnailsBar].scrollSpeedAcceleration)););
		
		
		
		
		
		set(layer[scrollPrevArrow_thumbnailsBar].onout, set(layer[scrollAreaContainer_thumbnailsBar].scrollSpeed, get(layer[scrollAreaContainer_thumbnailsBar].scrollSpeedInit)););
		set(layer[scrollNextArrow_thumbnailsBar].onout, set(layer[scrollAreaContainer_thumbnailsBar].scrollSpeed, get(layer[scrollAreaContainer_thumbnailsBar].scrollSpeedInit)););
		
	</action>
	
	
	
	
	<action name="hideArrows_thumbnailsBar">
		
		set(layer[scrollPrevArrow_thumbnailsBar].visible, false);
		set(layer[scrollNextArrow_thumbnailsBar].visible, false);
		
		

			mul(totalMargin_thumbnailsBar, get(layer[scrollAreaContainer_thumbnailsBar].marginX), 2);
			
			sub(scrollAreaContainerSize_thumbnailsBar, get(layer[get(layer[scrollAreaContainer_thumbnailsBar].parent)].pixelwidth), get(totalMargin_thumbnailsBar));

			set(layer[scrollAreaContainer_thumbnailsBar].width, get(scrollAreaContainerSize_thumbnailsBar));
			set(layer[scrollAreaContainer_thumbnailsBar].x, get(layer[scrollAreaContainer_thumbnailsBar].marginX));
			 
			
	</action>
	
	
	<action name="scrollPrev_thumbnailsBar">
		
		
		if(%1,
			inc(layer[scrollAreaContainer_thumbnailsBar].scrollSpeed, %1);
		);
		
		layer[thumbsScrollArea_thumbnailsBar].stopscrolling();
		
		set(scrollLimit_thumbnailsBar, 0);
		
		
			
				sub(scrollLimit_thumbnailsBar, get(layer[thumbsScrollArea_thumbnailsBar].width), get(layer[scrollAreaContainer_thumbnailsBar].width));
				div(scrollLimit_thumbnailsBar, 2);
			
			add(layer[thumbsScrollArea_thumbnailsBar].x, get(layer[scrollAreaContainer_thumbnailsBar].scrollSpeed));
			if(layer[thumbsScrollArea_thumbnailsBar].x GE scrollLimit_thumbnailsBar,
				set(layer[thumbsScrollArea_thumbnailsBar].x, get(scrollLimit_thumbnailsBar));
			);
		
		if(layer[scrollAreaContainer_thumbnailsBar].scrollSpeed LT layer[scrollAreaContainer_thumbnailsBar].scrollSpeedMax,
			inc(layer[scrollAreaContainer_thumbnailsBar].scrollSpeed);
		);
		
	</action>
	
	
	<action name="scrollNext_thumbnailsBar">
		
		
		if(%1,
			inc(layer[scrollAreaContainer_thumbnailsBar].scrollSpeed, %1);
		);
		
		layer[thumbsScrollArea_thumbnailsBar].stopscrolling();
		
			
			sub(scrollLimit_thumbnailsBar, get(layer[thumbsScrollArea_thumbnailsBar].width), get(layer[scrollAreaContainer_thumbnailsBar].width));
			
				div(scrollLimit_thumbnailsBar, 2);
			mul(scrollLimit_thumbnailsBar, -1);
			
			sub(layer[thumbsScrollArea_thumbnailsBar].x, get(layer[scrollAreaContainer_thumbnailsBar].scrollSpeed));
			if(layer[thumbsScrollArea_thumbnailsBar].x LE scrollLimit_thumbnailsBar,
				set(layer[thumbsScrollArea_thumbnailsBar].x, get(scrollLimit_thumbnailsBar));
			);
		
		if(layer[scrollAreaContainer_thumbnailsBar].scrollSpeed LT layer[scrollAreaContainer_thumbnailsBar].scrollSpeedMax,
			inc(layer[scrollAreaContainer_thumbnailsBar].scrollSpeed);
		);
		
	</action>
	
	
	<action name="resetMouseBehavior_thumbnailsBar">
	
		
		
			for( set(j_thumbnailsBar, 0), j_thumbnailsBar LT scene.count, inc(j_thumbnailsBar),
				set(thumbBorderName, 'thumbBorder_');
				txtadd(thumbBorderName, get(scene[get(j_thumbnailsBar)].name));
				txtadd(thumbBorderName, '_thumbnailsBar');
				
				setupMouseBehavior_thumbnailsBar(get(scene[get(j_thumbnailsBar)].name), get(scene[get(j_thumbnailsBar)].titleid));
			);
		
	</action>
	
	
	<action name="setupMouseBehavior_thumbnailsBar">

		set(thumbName, 'thumb_');
		txtadd(thumbName, %1);
		txtadd(thumbName, '_thumbnailsBar');
		
		set(thumbBorderName, 'thumbBorder_');
		txtadd(thumbBorderName, %1);
		txtadd(thumbBorderName, '_thumbnailsBar');
		
		if(layer[thumbnailBorderSource_thumbnailsBar].url,
			set(layer[get(thumbBorderName)].crop, get(layer[thumbnailBorderSource_thumbnailsBar].cropDefault));
			set(layer[get(thumbBorderName)].onovercrop, get(layer[thumbnailBorderSource_thumbnailsBar].cropHover));
			set(layer[get(thumbBorderName)].ondowncrop, get(layer[thumbnailBorderSource_thumbnailsBar].cropHover));
			set(layer[get(thumbBorderName)].tooltip, %2);
				set(layer[get(thumbBorderName)].onhover, showTooltip('plugin', tooltipStyle_thumbnailsBar));
				set(layer[get(thumbBorderName)].onout, hideTooltip());
		,
			set(layer[get(thumbBorderName)].bgcolor, get(layer[thumbnailBorderSource_thumbnailsBar].borderColorDefault));
			set(layer[get(thumbBorderName)].bgalpha, get(layer[thumbnailBorderSource_thumbnailsBar].borderAlphaDefault));
				set(layer[get(thumbName)].tooltip, %2);
				set(layer[get(thumbName)].onhover, showTooltip('plugin', tooltipStyle_thumbnailsBar));
			
			set(layer[get(thumbName)].onover, 
				set(layer[get(parent)].bgcolor, get(layer[thumbnailBorderSource_thumbnailsBar].borderColorHover));
				set(layer[get(parent)].bgalpha, get(layer[thumbnailBorderSource_thumbnailsBar].borderAlphaHover));
			);
			
			set(layer[get(thumbName)].onout, 
				set(layer[get(parent)].bgcolor, get(layer[thumbnailBorderSource_thumbnailsBar].borderColorDefault));
				set(layer[get(parent)].bgalpha, get(layer[thumbnailBorderSource_thumbnailsBar].borderAlphaDefault));
				hideTooltip();
			);
		);
	
	</action>
	
	
	<action name="highlightCurrentThumb_thumbnailsBar">
			delayedcall(0.1,highlightThumb_thumbnailsBar(get(xml.scene)));
	</action>
	
	
	<action name="highlightThumb_thumbnailsBar">
	
		set(thumbBorderName, 'thumbBorder_');
		txtadd(thumbBorderName, %1);
		txtadd(thumbBorderName, '_thumbnailsBar');
		
		if(layer[thumbnailBorderSource_thumbnailsBar].url,
			set(layer[get(thumbBorderName)].crop, get(layer[thumbnailBorderSource_thumbnailsBar].cropSelected));
			set(layer[get(thumbBorderName)].onovercrop, get(layer[thumbnailBorderSource_thumbnailsBar].cropSelected));
			set(layer[get(thumbBorderName)].ondowncrop, get(layer[thumbnailBorderSource_thumbnailsBar].cropSelected));
		,
			set(thumbName, 'thumb_');
			txtadd(thumbName, %1);
			txtadd(thumbName, '_thumbnailsBar');
			
			set(layer[get(thumbBorderName)].bgcolor, get(layer[thumbnailBorderSource_thumbnailsBar].borderColorSelected));
			set(layer[get(thumbBorderName)].bgalpha, get(layer[thumbnailBorderSource_thumbnailsBar].borderAlphaSelected));
			
			set(layer[get(thumbName)].onover, "");
			set(layer[get(thumbName)].onout, hideTooltip(););
		);

		scrollToThumb_thumbnailsBar(%1);
	</action>
	
	
	<action name="scrollToCurrentThumb_thumbnailsBar">
			scrollToThumb_thumbnailsBar(get(xml.scene));
	</action>
	
	
	<action name="scrollToThumb_thumbnailsBar">
		
		set(thumbName, 'thumb_');
		set(thumbBorderName, 'thumbBorder_');
		
		txtadd(thumbName, %1);
		txtadd(thumbName, '_thumbnailsBar');
		txtadd(thumbBorderName, %1);
		txtadd(thumbBorderName, '_thumbnailsBar');

			set(posX_thumbnailsBar, 0);
			if(layer[thumbnailBorderSource_thumbnailsBar].url,
				div(halfThumbWidth_thumbnailsBar, get(layer[get(thumbName)].width), 2);
				ifnot(layer[scrollAreaContainer_thumbnailsBar].adjustToContent,
					add(posX_thumbnailsBar, get(layer[get(thumbName)].x), get(halfThumbWidth_thumbnailsBar));
				);
				if(layer[thumbsScrollArea_thumbnailsBar].scrolltocenter,
					layer[thumbsScrollArea_thumbnailsBar].scrolltocenter(get(posX_thumbnailsBar), 0);
				);
			,
				div(halfThumbWidth_thumbnailsBar, get(layer[get(thumbBorderName)].width), 2);
				ifnot(layer[scrollAreaContainer_thumbnailsBar].adjustToContent,
					add(posX_thumbnailsBar, get(layer[get(thumbBorderName)].x), get(halfThumbWidth_thumbnailsBar));
				);
				if(layer[thumbsScrollArea_thumbnailsBar].scrolltocenter,
					layer[thumbsScrollArea_thumbnailsBar].scrolltocenter(get(posX_thumbnailsBar), 0);
				);
			);
		
	</action>
	





<!-- ********** -->
<!-- Title -->
<!-- id : title -->
<!-- ********** -->

  <events name="title_events" 
    onTourStart="showtitle();"
    hidetourcontrols="hidetitle();" 
    showtourcontrols="showtitle();" 
    onnewpano="updatetitle();"
    changetourlanguage="changeLanguagetitle"
    keep="true" />

  <action name="hidetitle">set(layer[title].visible, false);</action>
  <action name="showtitle">set(layer[title].visible, true );</action>

  <action name="changeLanguagetitle">
    updatetitle();
  </action>

  <action name="updatetitle">
    getmessage(layer[title].html, get(scene[get(xml.scene)].titleid));
    escape(layer[title].html);
  </action>
  <layer name="title" keep="true" zorder="11"
         type="text"
         align="top" x="0" y="70"
         bg="false"
         bgborder="0"
         alpha="1"
         visible="false"
         capture="false" handcursor="false" enabled="false"
         interactivecontent="false" 
         txtshadow="1.0 1.0 4.0 0x000000 1.0"
         css="text-align:center;
              color:#ffffff;
              font-family:Arial;
              font-weight:bold;
              font-size:16px;"/>

  <!-- Fullscreen Management -->
  <action name="exitFullScreen" devices="fullscreensupport">set(tour_fullscreen,false);js(setFullscreen(false));</action>
  <action name="enterFullScreen" devices="fullscreensupport">set(tour_fullscreen,true);js(setFullscreen(true));</action>
  <action name="switchFullScreen">if(tour_fullscreen,exitFullScreen();,enterFullScreen(););</action>

  
  <events name="krpanoExitFullscreenEvent"
    onexitfullscreen="if(tour_fullscreen,exitFullScreenChangeEvent(););"
    keep="true" />

  <action name="exitFullScreenChangeEvent" devices="fullscreensupport">set(tour_fullscreen,false);events.dispatch(onexitfullscreen);</action>
  <action name="enterFullScreenChangeEvent" devices="fullscreensupport">set(tour_fullscreen,true);events.dispatch(onenterfullscreen);</action>
  <action name="exitFullScreenFallback">set(fullscreen,false);</action>
  <action name="enterFullScreenFallback">set(fullscreen,true);</action>
  
  <action name="resizeFullScreenEvent">delayedcall(0,updatescreen(););</action>

  <action name="enableGyroscope">
    changeGyroscopeState(true);
  </action>
  <action name="disableGyroscope">
    changeGyroscopeState(false);
  </action>


	<!-- WebVR plugin for VR availability tests -->

	<plugin name="ptpvrmode" devices="html5" keep="true"
		url="%FIRSTXML%/graphics/webvr.js"
		mobilevr_support="true"
		mobilevr_fake_support="true"
		vr_cursor=""
		vr_cursor_enabled="false"
		onavailable="delayedcall(1, checkVrAvailability(););"
		onunavailable="checkVrUnavailable();"
		/>
	<action name="checkVrAvailability">
		if(plugin[ptpvrmode],
			if (plugin[ptpvrmode].isavailable,
				set(tour_vrdevices, true);
				events.dispatch(onvravailable);
			,
				set(tour_vrdevices, false);
			);
		,
			checkVrUnavailable();
		);
	</action>
	<action name="checkVrUnavailable">
		set(tour_vrdevices, false);
		events.dispatch(onvrunavailable);
	</action>
  <!-- Hide / Show Controls -->
  <action name="hideTourControls">set(tour_displaycontrols, false);events.dispatch(hidetourcontrols);</action>
  <action name="showTourControls">set(tour_displaycontrols, true); events.dispatch(showtourcontrols);</action>


  <!-- FLOORPLAN -->
  <action name="hideFloorplan">set(tour_displayfloorplan, false);events.dispatch(onhidetourfloorplan);</action>
  <action name="showFloorplan">set(tour_displayfloorplan, true); events.dispatch(onshowtourfloorplan);</action>


</krpano>